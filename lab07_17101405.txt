#task01
class KeyIndex:
  array = []
  def __init__(self,array):
        self.array = []
        
        for i in array:
            self.array.append(i)
        max=self.array[0]
        min=self.array[0]
        for i in self.array:
            if max<i or max<=i:
                max=i
            if min>i or min>=i:
                min=1
        
        if min<0:
            self.k=((max+(min*-1))+1)*[0]
            
            for i in self.a:
                self.k[i+(min*-1)]+=1
                

        elif min>0:
            self.k=[0]*(max+1)
            #print(len(self.k))
            for i in self.array:
                self.k[i]+=1
            
  def Sort(self):
        min=self.array[0]
        for i in self.array:
            if min>i:
                min=1
        if min<0:
            negN=(min*-1)
        else:
            negN=0
        for i in range(len(self.array)):
            mini = i
            for j in range(i + 1, len(self.array)):
                if self.array[j] < self.array[mini]:
                    mini = j
            (self.array[i], self.array[mini]) = (self.array[mini]-negN, self.array[i]-negN)
         
  def search(self,val):
        if val in self.array:
            return True
        else:
            return False
array = KeyIndex([-3,5,2,6,-7])    
array.Sort()
lst = array.array
print(lst)
array.search(-5)


#task02
class HashTable(object):
    def __init__(self, length=9):
       
        self.array = [None] * length
    
    def hash(self, key):
       
        length = len(self.array)
        return hash(key) % length
        value = 0
        count = 0
        sum = 0
        for l in key:
            if l not in ('A', 'E', 'I', 'O', 'U', '1', '2','3','4','5','6','7','8','9','0'):
                count +=1
            else:
                if l not in ('A', 'E', 'I', 'O', 'U'):
                    sum += ord(l)-ord('0')
                value = (count*24 + sum)
            return value % self.array
        
    def add(self, key):
      
        index = self.hash(key)
        if self.array[index] is not None:
           
            for kvp in self.array[index]:
               
                if kvp[0] == key:
                    k
                    break
            else:
               
                self.array[index].append(key)
        else:
           
            self.array[index] = []
            self.array[index].append(key)
    
    def get(self, key):
        """Get a value by key"""
        index = self.hash(key)
        if self.array[index] is None:
            raise KeyError()
        else:
            
            for kvp in self.array[index]:
                if kvp[0] == key:
                    return kvp[1]
            
           
            raise KeyError()
table1 = HashTable()
table1.add('ST1E89B8A32')
