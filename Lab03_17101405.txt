#task1


class Node:
    def __init__(self,data):
        self.data=data
        self.next=None
        self.previous=None

class DummyHeadedDoublyCircularLinkedList():
    def __init__(self):
        self.head=None
        self.tail=None


#task2
!pip install multipledispatch
class Node:
    def __init__(self,data=None):
        self.data=data
        self.next=None
        self.previous=None

class DummyHeadedDoublyCircularLinkedList():
    def __init__(self):
        self.head=None
        self.tail=None

    def CreateCDLL(self):
        newNode= Node()
        self.head=newNode
        self.tail=newNode
        newNode.previous=newNode
        newNode.next=newNode
        

    def showList(self):
        x=self.head.next
        if x.next is None:
            print ("Empty list")
        else:
            while x.next is not None:                        
                print (x.data,'->', end=' ')
                if x.next==self.head:
                    break
                x=x.next

    from multipledispatch import dispatch
    @dispatch(int)
    def insertCDLL(self,newElement):
        if self.head is None:
            return "Empty"
        else:
            newNode = Node(newElement)
            tempNode = self.head.next
            while tempNode.next is not None:
                if tempNode.next==self.head:
                    break
                tempNode = tempNode.next
                
            newNode.next = tempNode.next
            newNode.previous = tempNode
            newNode.next.previous = newNode
            tempNode.next = newNode

    @dispatch(int,int)
    def insertCDLL(self, newElement, location):
        if self.head is None:
            return "Empty"
        else:
            newNode = Node(newElement)
            
            if location == 0:
                print('please try again')
            else:
                tempNode = self.head
                index = 0
                while tempNode.next is not None:
                    index+=1
                    if tempNode.next==self.head:
                        break
                    tempNode = tempNode.next
                
                tempNode = self.head
                y=0
                while y < location - 1:
                    tempNode = tempNode.next
                    y+=1

                if index>=location:
                    newNode.next = tempNode.next
                    newNode.prev = tempNode
                    newNode.next.prev = newNode
                    tempNode.next = newNode
                else:
                    print('Index doesnot exist')

    def Remove(self, location):
        if location > 0:
            if self.head is None:
                print("Wrong node")
            else:
                currentNode = self.head
                index = 0
                while index < location - 1:
                    currentNode = currentNode.next
                    index += 1
                if location >= index:
                    currentNode.next = currentNode.next.next
                    currentNode.next.prev = currentNode
                else:
                    print('Index does not exist')
        else:
            print('please try again')

    def RemoveKey(self,key):
        x=self.head.next
        index=0
        while x.next is not None:
            index+=1                       
            if x.data==key:
                
                self.Remove(index)
                break
            x=x.next


l=[1,2,3]

cCDLL=DummyHeadedDoublyCircularLinkedList()
m=cCDLL.CreateCDLL()
for i in l:
    cCDLL.insertCDLL(i)
cCDLL.showList()
print('\n','------------------------')
cCDLL.insertCDLL(40,4)     
cCDLL.insertCDLL(50,3)
cCDLL.showList()
print('\n','------------------------')
cCDLL.Remove(2)        
cCDLL.showList()

print('\n','-----------------------')

cCDLL.RemoveKey(50)
cCDLL.showList()